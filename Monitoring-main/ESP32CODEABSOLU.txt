#include <WiFi.h>
#include <ArduinoJson.h>
#include "DHT.h"
#include <DallasTemperature.h>
#include <OneWire.h>
#include <HX711.h>

// --- Configuration des capteurs ---
#define DS18B20_PIN 4         // Broche DATA du DS18B20
OneWire oneWire(DS18B20_PIN);
DallasTemperature ds18b20(&oneWire);

// DHT11
#define DHTPIN 21             // Broche GPIO du capteur DHT11
#define DHTTYPE DHT11         // Type de capteur
DHT dht(DHTPIN, DHTTYPE);

// Relais (ex. pour un aérateur)
#define RELAY_PIN 25          // GPIO pour le relais

// --- Configuration du moteur pas à pas ---
#define IN1 18  
#define IN2 19  
#define IN3 22  
#define IN4 23  
int stepDelay = 2; // Délai entre chaque pas en ms

// Séquence de pas du moteur
const int steps[4][4] = {
  {1, 0, 1, 0}, // Étape 1
  {0, 1, 1, 0}, // Étape 2
  {0, 1, 0, 1}, // Étape 3
  {1, 0, 0, 1}  // Étape 4
};

const char* ssid = "AQUA_APP";
const char* password = "12345678";
WiFiServer server(80);

// Fonction pour activer un pas du moteur
void stepMotor(int step) {
  digitalWrite(IN1, steps[step][0]);
  digitalWrite(IN2, steps[step][1]);
  digitalWrite(IN3, steps[step][2]);
  digitalWrite(IN4, steps[step][3]);
}

// Fonction pour faire tourner le moteur pendant 3 secondes
void runMotorFor3Sec() {
  unsigned long startTime = millis();
  int stepIndex = 0;
  while (millis() - startTime < 3000) {
    stepMotor(stepIndex % 4);
    stepIndex++;
    delay(stepDelay);
  }
  // Arrêt du moteur
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

void setup() {
  ds18b20.begin();
  dht.begin();
  Serial.begin(115200);
  Serial.println("Démarrage de l'ESP32...");

  WiFi.softAP(ssid, password);
  IPAddress IP = WiFi.softAPIP();
  Serial.print("Point d'accès configuré. Adresse IP : ");
  Serial.println(IP);

  server.begin();

  // Initialisation du relais
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);  // Désactiver le relais au démarrage

  // Initialisation des broches du moteur pas à pas
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
}

void loop() {
  WiFiClient client = server.available();
  if (!client) return;

  while (!client.available()) {
    delay(1);
  }

  String request = client.readStringUntil('\r');
  client.flush();

  // Si la requête contient "/activateMotor", activer le moteur pendant 3 secondes
  if (request.indexOf("/activateMotor") >= 0) {
    Serial.println("Activation du moteur demandée via HTTP");
    runMotorFor3Sec();
    client.print("HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\n\r\nMoteur activé pour 3 secondes");
    client.stop();
    return;
  }

  // Lecture des données des capteurs
  float temperature = dht.readTemperature();
  float humidity = dht.readHumidity();
  ds18b20.requestTemperatures();
  float tempDS18B20 = ds18b20.getTempCByIndex(0);
  
  if (isnan(temperature) || isnan(humidity)) {
    temperature = 0.0;
    humidity = 0.0;
  }
  
  Serial.println("=== Données des capteurs ===");
  Serial.print("Température DHT11 : ");
  Serial.print(temperature);
  Serial.println(" °C");
  
  Serial.print("Humidité DHT11 : ");
  Serial.print(humidity);
  Serial.println(" %");
  
  Serial.print("Température DS18B20 : ");
  Serial.print(tempDS18B20);
  Serial.println(" °C");
  
  // Activation du relais si la température DS18B20 > 35°C
  if (tempDS18B20 > 35) {
    digitalWrite(RELAY_PIN, HIGH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }
  bool aeratorState = digitalRead(RELAY_PIN);

  // Construction et envoi de la réponse JSON
  String json = "{";
  json += "\"temperature\": " + String(temperature) + ",";
  json += "\"humidity\": " + String(humidity) + ",";
  json += "\"tempDS18B20\": " + String(tempDS18B20) + ",";
  json += "\"aeratorState\": " + String(aeratorState ? "true" : "false");
  json += "}";
  
  client.print("HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n");
  client.print(json);
  client.stop();
}
